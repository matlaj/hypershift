// Code generated by MockGen. DO NOT EDIT.
// Source: releaseinfo.go
//
// Generated by this command:
//
//	mockgen -source=releaseinfo.go -package=releaseinfo -destination=providerwithregistryoverrides_mock.go
//

// Package releaseinfo is a generated GoMock package.
package releaseinfo

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
	isgomock struct{}
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Lookup mocks base method.
func (m *MockProvider) Lookup(ctx context.Context, image string, pullSecret []byte) (*ReleaseImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lookup", ctx, image, pullSecret)
	ret0, _ := ret[0].(*ReleaseImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lookup indicates an expected call of Lookup.
func (mr *MockProviderMockRecorder) Lookup(ctx, image, pullSecret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockProvider)(nil).Lookup), ctx, image, pullSecret)
}

// MockProviderWithRegistryOverrides is a mock of ProviderWithRegistryOverrides interface.
type MockProviderWithRegistryOverrides struct {
	ctrl     *gomock.Controller
	recorder *MockProviderWithRegistryOverridesMockRecorder
	isgomock struct{}
}

// MockProviderWithRegistryOverridesMockRecorder is the mock recorder for MockProviderWithRegistryOverrides.
type MockProviderWithRegistryOverridesMockRecorder struct {
	mock *MockProviderWithRegistryOverrides
}

// NewMockProviderWithRegistryOverrides creates a new mock instance.
func NewMockProviderWithRegistryOverrides(ctrl *gomock.Controller) *MockProviderWithRegistryOverrides {
	mock := &MockProviderWithRegistryOverrides{ctrl: ctrl}
	mock.recorder = &MockProviderWithRegistryOverridesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderWithRegistryOverrides) EXPECT() *MockProviderWithRegistryOverridesMockRecorder {
	return m.recorder
}

// GetRegistryOverrides mocks base method.
func (m *MockProviderWithRegistryOverrides) GetRegistryOverrides() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistryOverrides")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetRegistryOverrides indicates an expected call of GetRegistryOverrides.
func (mr *MockProviderWithRegistryOverridesMockRecorder) GetRegistryOverrides() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistryOverrides", reflect.TypeOf((*MockProviderWithRegistryOverrides)(nil).GetRegistryOverrides))
}

// Lookup mocks base method.
func (m *MockProviderWithRegistryOverrides) Lookup(ctx context.Context, image string, pullSecret []byte) (*ReleaseImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lookup", ctx, image, pullSecret)
	ret0, _ := ret[0].(*ReleaseImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lookup indicates an expected call of Lookup.
func (mr *MockProviderWithRegistryOverridesMockRecorder) Lookup(ctx, image, pullSecret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockProviderWithRegistryOverrides)(nil).Lookup), ctx, image, pullSecret)
}

// MockProviderWithOpenShiftImageRegistryOverrides is a mock of ProviderWithOpenShiftImageRegistryOverrides interface.
type MockProviderWithOpenShiftImageRegistryOverrides struct {
	ctrl     *gomock.Controller
	recorder *MockProviderWithOpenShiftImageRegistryOverridesMockRecorder
	isgomock struct{}
}

// MockProviderWithOpenShiftImageRegistryOverridesMockRecorder is the mock recorder for MockProviderWithOpenShiftImageRegistryOverrides.
type MockProviderWithOpenShiftImageRegistryOverridesMockRecorder struct {
	mock *MockProviderWithOpenShiftImageRegistryOverrides
}

// NewMockProviderWithOpenShiftImageRegistryOverrides creates a new mock instance.
func NewMockProviderWithOpenShiftImageRegistryOverrides(ctrl *gomock.Controller) *MockProviderWithOpenShiftImageRegistryOverrides {
	mock := &MockProviderWithOpenShiftImageRegistryOverrides{ctrl: ctrl}
	mock.recorder = &MockProviderWithOpenShiftImageRegistryOverridesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderWithOpenShiftImageRegistryOverrides) EXPECT() *MockProviderWithOpenShiftImageRegistryOverridesMockRecorder {
	return m.recorder
}

// GetMirroredReleaseImage mocks base method.
func (m *MockProviderWithOpenShiftImageRegistryOverrides) GetMirroredReleaseImage() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMirroredReleaseImage")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMirroredReleaseImage indicates an expected call of GetMirroredReleaseImage.
func (mr *MockProviderWithOpenShiftImageRegistryOverridesMockRecorder) GetMirroredReleaseImage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMirroredReleaseImage", reflect.TypeOf((*MockProviderWithOpenShiftImageRegistryOverrides)(nil).GetMirroredReleaseImage))
}

// GetOpenShiftImageRegistryOverrides mocks base method.
func (m *MockProviderWithOpenShiftImageRegistryOverrides) GetOpenShiftImageRegistryOverrides() map[string][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenShiftImageRegistryOverrides")
	ret0, _ := ret[0].(map[string][]string)
	return ret0
}

// GetOpenShiftImageRegistryOverrides indicates an expected call of GetOpenShiftImageRegistryOverrides.
func (mr *MockProviderWithOpenShiftImageRegistryOverridesMockRecorder) GetOpenShiftImageRegistryOverrides() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenShiftImageRegistryOverrides", reflect.TypeOf((*MockProviderWithOpenShiftImageRegistryOverrides)(nil).GetOpenShiftImageRegistryOverrides))
}

// GetRegistryOverrides mocks base method.
func (m *MockProviderWithOpenShiftImageRegistryOverrides) GetRegistryOverrides() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistryOverrides")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetRegistryOverrides indicates an expected call of GetRegistryOverrides.
func (mr *MockProviderWithOpenShiftImageRegistryOverridesMockRecorder) GetRegistryOverrides() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistryOverrides", reflect.TypeOf((*MockProviderWithOpenShiftImageRegistryOverrides)(nil).GetRegistryOverrides))
}

// Lookup mocks base method.
func (m *MockProviderWithOpenShiftImageRegistryOverrides) Lookup(ctx context.Context, image string, pullSecret []byte) (*ReleaseImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lookup", ctx, image, pullSecret)
	ret0, _ := ret[0].(*ReleaseImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lookup indicates an expected call of Lookup.
func (mr *MockProviderWithOpenShiftImageRegistryOverridesMockRecorder) Lookup(ctx, image, pullSecret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockProviderWithOpenShiftImageRegistryOverrides)(nil).Lookup), ctx, image, pullSecret)
}
